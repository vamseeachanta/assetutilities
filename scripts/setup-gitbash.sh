#!/bin/bash

# AssetUtilities Git Bash Development Environment Setup
# This script configures Git Bash for optimal AssetUtilities development
# Run from the AssetUtilities project root directory

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Script metadata
readonly SCRIPT_NAME="AssetUtilities Git Bash Setup"
readonly SCRIPT_VERSION="1.0.0"
readonly CONFIG_MARKER="# AssetUtilities Project Configuration"

# Print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Print script header
print_header() {
    echo "=================================="
    echo "$SCRIPT_NAME v$SCRIPT_VERSION"
    echo "=================================="
    echo
}

# Detect if we're in an AssetUtilities project
is_assetutilities_project() {
    local current_dir="$PWD"
    
    # Traverse up the directory tree
    while [[ "$current_dir" != "/" ]]; do
        # Check for Git repository
        if [[ ! -d "$current_dir/.git" ]]; then
            current_dir="$(dirname "$current_dir")"
            continue
        fi
        
        # Check for AssetUtilities-specific markers
        if [[ -f "$current_dir/setup.py" ]] || 
           [[ -f "$current_dir/pyproject.toml" ]] || 
           [[ -d "$current_dir/src/assetutilities" ]]; then
            export ASSETUTILITIES_ROOT="$current_dir"
            return 0
        fi
        
        current_dir="$(dirname "$current_dir")"
    done
    
    return 1
}

# Find the project root directory
find_project_root() {
    if is_assetutilities_project; then
        echo "$ASSETUTILITIES_ROOT"
        return 0
    else
        return 1
    fi
}

# Validate environment prerequisites
validate_environment() {
    print_status "Validating environment..."
    
    # Check if we're in a Git Bash environment
    if ! command -v bash &> /dev/null; then
        print_error "Bash is not available. This script requires Git Bash."
        exit 1
    fi
    
    # Check if we're in an AssetUtilities project
    if ! is_assetutilities_project; then
        print_error "This script must be run from within an AssetUtilities project directory."
        print_error "Make sure you're in the project root or a subdirectory."
        exit 1
    fi
    
    # Check Python availability
    if ! command -v python &> /dev/null; then
        print_warning "Python is not available in PATH. Some features may not work."
    fi
    
    print_success "Environment validation passed"
}

# Create backup of existing .bashrc
backup_bashrc() {
    local bashrc_path="$HOME/.bashrc"
    
    if [[ -f "$bashrc_path" ]]; then
        local timestamp
        timestamp=$(date +"%Y%m%d_%H%M%S")
        local backup_path="${bashrc_path}.backup.${timestamp}"
        
        print_status "Backing up existing .bashrc to: $backup_path"
        cp "$bashrc_path" "$backup_path"
        print_success "Backup created successfully"
    else
        print_status "No existing .bashrc found, creating new one"
        touch "$bashrc_path"
    fi
}

# Check if project configuration is already installed
is_config_installed() {
    local bashrc_path="$HOME/.bashrc"
    
    if [[ -f "$bashrc_path" ]] && grep -q "$CONFIG_MARKER" "$bashrc_path"; then
        return 0
    else
        return 1
    fi
}

# Install project configuration into .bashrc
install_project_config() {
    local bashrc_path="$HOME/.bashrc"
    local project_root
    project_root=$(find_project_root)
    
    if is_config_installed; then
        print_warning "AssetUtilities configuration already installed in .bashrc"
        print_status "To reinstall, remove the existing configuration first"
        return 0
    fi
    
    print_status "Installing AssetUtilities project configuration..."
    
    # Append project configuration to .bashrc
    cat >> "$bashrc_path" << EOF

$CONFIG_MARKER
# Auto-generated by setup-gitbash.sh - DO NOT EDIT MANUALLY
# This configuration automatically loads AssetUtilities project settings

# Function to detect and load AssetUtilities project configuration
load_assetutilities_config() {
    local current_dir="\$PWD"
    
    # Traverse up to find AssetUtilities project root
    while [[ "\$current_dir" != "/" ]]; do
        if [[ -d "\$current_dir/.git" ]] && 
           ([[ -f "\$current_dir/setup.py" ]] || 
            [[ -f "\$current_dir/pyproject.toml" ]] || 
            [[ -d "\$current_dir/src/assetutilities" ]]); then
            
            # Found AssetUtilities project, load configuration
            if [[ -f "\$current_dir/config/.project-bashrc" ]]; then
                export ASSETUTILITIES_ROOT="\$current_dir"
                source "\$current_dir/config/.project-bashrc"
                return 0
            fi
            break
        fi
        current_dir="\$(dirname "\$current_dir")"
    done
    
    # Clean up if not in project
    unset ASSETUTILITIES_ROOT
    return 1
}

# Load configuration if in AssetUtilities project
load_assetutilities_config

# End AssetUtilities Project Configuration
EOF

    print_success "Project configuration installed successfully"
}

# Create project-specific configuration directories
create_config_directories() {
    local project_root
    project_root=$(find_project_root)
    
    print_status "Creating configuration directories..."
    
    # Create config directory
    mkdir -p "$project_root/config"
    
    # Create scripts directory if it doesn't exist
    mkdir -p "$project_root/scripts"
    
    print_success "Configuration directories created"
}

# Set proper script permissions
set_script_permissions() {
    local project_root
    project_root=$(find_project_root)
    
    print_status "Setting script permissions..."
    
    # Make setup script executable
    chmod +x "$project_root/scripts/setup-gitbash.sh" 2>/dev/null || true
    
    # Make any other scripts executable
    find "$project_root/scripts" -name "*.sh" -type f -exec chmod +x {} \; 2>/dev/null || true
    
    print_success "Script permissions set"
}

# Print setup completion message
print_completion_message() {
    local project_root
    project_root=$(find_project_root)
    
    echo
    print_success "AssetUtilities Git Bash setup completed successfully!"
    echo
    echo "Next steps:"
    echo "1. Restart your Git Bash terminal (or run: source ~/.bashrc)"
    echo "2. Navigate to any directory within the AssetUtilities project"
    echo "3. Project-specific aliases and environment will load automatically"
    echo
    echo "Configuration files are located in:"
    echo "  - Project config: $project_root/config/"
    echo "  - Scripts: $project_root/scripts/"
    echo
    echo "For troubleshooting, see: docs/git-bash-setup.md"
    echo
}

# Uninstall project configuration (optional function)
uninstall_config() {
    local bashrc_path="$HOME/.bashrc"
    
    if ! is_config_installed; then
        print_warning "AssetUtilities configuration not found in .bashrc"
        return 0
    fi
    
    print_status "Removing AssetUtilities configuration from .bashrc..."
    
    # Create temporary file without the project configuration
    sed "/$CONFIG_MARKER/,/# End AssetUtilities Project Configuration/d" "$bashrc_path" > "${bashrc_path}.tmp"
    mv "${bashrc_path}.tmp" "$bashrc_path"
    
    print_success "Configuration removed successfully"
}

# Show help message
show_help() {
    echo "Usage: $0 [OPTION]"
    echo
    echo "Setup Git Bash development environment for AssetUtilities project."
    echo
    echo "Options:"
    echo "  install     Install project configuration (default)"
    echo "  uninstall   Remove project configuration from .bashrc"
    echo "  status      Check if configuration is installed"
    echo "  help        Show this help message"
    echo
    echo "Examples:"
    echo "  $0              # Install configuration"
    echo "  $0 install      # Install configuration"
    echo "  $0 uninstall    # Remove configuration"
    echo "  $0 status       # Check installation status"
}

# Check installation status
check_status() {
    print_header
    
    if is_assetutilities_project; then
        local project_root
        project_root=$(find_project_root)
        print_success "Running in AssetUtilities project: $project_root"
    else
        print_error "Not in an AssetUtilities project directory"
        exit 1
    fi
    
    if is_config_installed; then
        print_success "AssetUtilities configuration is installed in .bashrc"
        
        # Check if project config files exist
        if [[ -f "$project_root/config/.project-bashrc" ]]; then
            print_success "Project configuration files found"
        else
            print_warning "Project configuration files not found in config/"
        fi
    else
        print_warning "AssetUtilities configuration not installed in .bashrc"
    fi
}

# Main installation function
main_install() {
    print_header
    validate_environment
    backup_bashrc
    install_project_config
    create_config_directories
    set_script_permissions
    print_completion_message
}

# Main function to handle command line arguments
main() {
    case "${1:-install}" in
        "install")
            main_install
            ;;
        "uninstall")
            print_header
            uninstall_config
            ;;
        "status")
            check_status
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"